{"version":3,"file":"VaultCreditCard-ff952bee.js","sources":["../../src/app/braintree/pages/gql/GQLVault/sections/VaultCreditCard.jsx"],"sourcesContent":["import createLoggers from '../../../../../../utils/logger.utils.jsx'\nimport withOperations from '../../../../../../layouts/withOperations.hoc.jsx'\nimport { useAddBusy, useRemoveBusy } from '../../../../../../states/Busy/busy.hooks.jsx'\nimport { useAddOutput } from '../../../../../../states/Output/output.hooks.jsx'\nimport { useSetError } from '../../../../../../states/Error/error.hooks.jsx'\nimport { gqlInterface } from '../../../../../../services/bt.service.jsx'\n\nconst { log, error } = createLoggers('VaultCreditCard.component.jsx')\n\nconst query = `\n    mutation VaultCreditCard($myInput: VaultCreditCardInput!, $hasVerifyDetails: Boolean!) {\n        vaultCreditCard(input: $myInput) {\n            clientMutationId\n            paymentMethod {\n                id\n                legacyId\n                usage\n            }\n            ...verificationFields @include(if: $hasVerifyDetails)\n        }\n    }\n\n    fragment verificationFields on Verification {\n        id\n        legacyId\n        status\n    }\n`\n\nconst _operations = {\n    vaultCreditCard: {\n        label: 'vaultCreditCard',\n        type: 'gql',\n        data: {\n            query: query,\n            variables: {\n                myInput: {\n                    clientMutationId: Date.now().toString(),\n                    paymentMethodId: 'fake-valid-nonce',\n                    customerId: 'Y3VzdG9tZXJfMjYwODM3NTA0',\n                    billingAddress: {\n                        firstName: 'Jill',\n                        lastName: 'Doe',\n                        streetAddress: '555 Smith St.',\n                        extendedAddress: '#5',\n                        locality: 'Oakland',\n                        region: 'CA',\n                        postalCode: '12345',\n                        countryCode: 'USA',\n                    },\n                },\n                hasVerifyDetails: true,\n            },\n        },\n    },\n}\n\nconst VaultCreditCard = (props) => {\n    const addBusy = useAddBusy()\n    const removeBusy = useRemoveBusy()\n    const addOutput = useAddOutput()\n    const setError = useSetError()\n\n    const vaultCreditCard = async () => {\n        addBusy()\n        try {\n            const response = await gqlInterface(props.operations.data.query, props.operations.data.variables)\n            log('vaultCreditCard', response)\n            addOutput('VaultCreditCard', response)\n        } catch (e) {\n            setError()\n            error(e)\n        }\n        removeBusy()\n    }\n\n    return (\n        <button className=\"btn btn-outline-success\" onClick={vaultCreditCard}>\n            Vault Credit Card\n        </button>\n    )\n}\n\nexport default withOperations(VaultCreditCard, _operations)\n"],"names":["log","error","createLoggers","query","_operations","VaultCreditCard","props","addBusy","useAddBusy","removeBusy","useRemoveBusy","addOutput","useAddOutput","setError","useSetError","response","gqlInterface","e","VaultCreditCard$1","withOperations"],"mappings":"2RAOA,KAAM,CAAE,IAAAA,EAAK,MAAAC,CAAM,EAAIC,EAAc,+BAA+B,EAE9DC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBRC,EAAc,CAChB,gBAAiB,CACb,MAAO,kBACP,KAAM,MACN,KAAM,CACF,MAAAD,EACA,UAAW,CACP,QAAS,CACL,iBAAkB,KAAK,IAAI,EAAE,SAAS,EACtC,gBAAiB,mBACjB,WAAY,2BACZ,eAAgB,CACZ,UAAW,OACX,SAAU,MACV,cAAe,gBACf,gBAAiB,KACjB,SAAU,UACV,OAAQ,KACR,WAAY,QACZ,YAAa,KACjB,CACJ,EACA,iBAAkB,EACtB,CACJ,CACJ,CACJ,EAEME,EAAmBC,GAAU,CAC/B,MAAMC,EAAUC,IACVC,EAAaC,IACbC,EAAYC,IACZC,EAAWC,IAejB,SACK,SAAO,CAAA,UAAU,0BAA0B,QAdxB,SAAY,CACxBP,IACJ,GAAA,CACM,MAAAQ,EAAW,MAAMC,EAAaV,EAAM,WAAW,KAAK,MAAOA,EAAM,WAAW,KAAK,SAAS,EAChGN,EAAI,kBAAmBe,CAAQ,EAC/BJ,EAAU,kBAAmBI,CAAQ,QAChCE,GACIJ,IACTZ,EAAMgB,CAAC,CACX,CACWR,GAAA,EAI2D,SAEtE,mBAAA,CAAA,CAER,EAEAS,EAAeC,EAAed,EAAiBD,CAAW"}